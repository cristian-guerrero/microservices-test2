video 98
# para docker desktop 
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.41.0/deploy/static/provider/cloud/deploy.yaml

# para minikube
# Create the Ingress resource by running the following command:
# kubectl apply -f https://k8s.io/examples/service/networking/example-ingress.yaml
# si se esta utilizando minikube localmente se debe obtener la ip:
#  minikube ip
# esa ip se debe poner en el archivo host -> 192.168.49.2 kicketing.dev

-- cuando salga el error de nginx al inciar con skaffold dev ejecutar el siguiente comando
# kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission


para pasar por la pantalla de pagina insegura de crome se escribe thisisunsafe
thisisunsafe

section 6 is about google cloud b 
--- -------------------
docker image ls 
# remove all stoped containers
docker container prune 
# remove untag images
docker image rm -f  $(docker images | grep "^<none>" | awk "{print $3}")
# remove images by user id
docker image rm -f  $(docker images | grep "^guerreocristian" | awk "{print $3}")
 
 
 docker rmi $(docker images |grep 'guerrerocristian')
 docker rmi $(docker images |grep '<none>')

// JWT estrategia con microservicios
// para el manejo de tokens se puede dejar una duración de 15 minutos y un refresh tokens
adicionalmente cuando se banee un unsuario que tenga ya un token se debe almacenar en 
cada uno de los microservicios una lista de usuarios baneados
esta lista tendra una duración en memoria igual a la duración de el token 
entonces cuando un usuario este banejado los microservicios lo saben y si el token esta 
caducado se le pedira al front o al usuario que refresque el token con el tokenRefresh y 
vualva a hacer la petición
-- se debe implementar un nuevo evento que los servicios esten escuchando de usuario baneado
///
para utilizar los jwt con SSR se necesita o bien cookies o service worker para el primer render

// 
kubectl create secret generic jwt-secret --from-literal=JWT_KEY=privatekey

// accecer a servicios fuera del namespace default
# kubectl get services -n ingress-nginx 

// para acceder desde el cliente del lado del servidor dentro del pod se hace 
// external name service (kubernetes)
a través del ingress-nginx de la siguiente  forma:
// http://ingress-nginx-controller.ingress-nginx.svc.cluster.local
// http://ingress-nginx-controller.ingress-nginx.svc.cluster.local/api/users/currentuser

// --------------- publish npm repository -----------------
npm adduser
npm publish --access public 
// --------------------------------------------------
# port forwarding
kubectl port-forward pod-name  4222:4222 (localmachine-port:pod-port)
# example -> kubectl port-forward nats-depl-f5f99b64d-cp4cv 4222:4222

// monitorear el estado del servidor nats
 kubectl port-forward nats-depl-f5f99b64d-cp4cv 8222:8222
localhost:8222/streaming
localhost:8222/streaming/channelsz?subs=1

IMPORTANT !! VIDEO 275 (CORE CONCURRENCY ISSUES)

## commands 
kubectl get ingress
minikube ip 
kubectl get pods -n ingress-nginx 
kubectl port-forward client-depl-b68cd8678-qdjj8 3000:3000